/*
#include <SPI.h>
#include <TimerOne.h>
#include <DMD.h>
#include <Arial_Black_16.h>

#define DISPLAYS_ACROSS 1
#define DISPLAYS_DOWN 1

DMD dmd(DISPLAYS_ACROSS, DISPLAYS_DOWN);

byte arrow1[] = {
  B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000000, B00000000, B00000000,
  B00000000, B00000001, B00000000, B00000000,
  B00000000, B00000011, B00000000, B00000000,
  B00000000, B00000111, B00000000, B00000000,
  B00000000, B00001111, B00000000, B00000000,
  B00000000, B00011111, B11111111, B11100000,
  B00000000, B00111111, B11111111, B11100000,
  B00000000, B01111111, B11111111, B11100000,
  B00000000, B01111111, B11111111, B11100000,
  B00000000, B00111111, B00000000, B00000000,
  B00000000, B00011111, B00000000, B00000000,
  B00000000, B00001111, B00000000, B00000000,
  B00000000, B00000111, B00000000, B00000000,
  B00000000, B00000011, B00000000, B00000000
};

void scanDisplay() {
  dmd.scanDisplayBySPI();
}

void setup() {
  Timer1.initialize(5000); // Refresh rate in microseconds
  Timer1.attachInterrupt(scanDisplay);
  dmd.clearScreen(true);
}

void loop() {
  dmd.clearScreen(true);
  dmd.selectFont(Arial_Black_16);
  const char* arrow1Text = reinterpret_cast<const char*>(arrow1);
  dmd.drawMarquee(arrow1Text, 32, DISPLAYS_ACROSS);
  delay(2000); // Display the arrow for 2 seconds
}
*/
/*
 * Copyright (C) 2012 Southern Storm Software, Pty Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
// EXAMPLE-2 Running arrow
#include <DMD3.h>

DMD3 display;

// Running stick figure pictures are loosely based on those from this tutorial:
// http://www.fluidanims.com/FAelite/phpBB3/viewtopic.php?f=10&t=102

byte const run1[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run2[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000001,
  B00000000, B0000001,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run3[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run4[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run5[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
};


byte const run6[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run7[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000001,
  B00000000, B00000000,
};

byte const run8[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000011,
  B00000000, B00000001,
};


byte const run9[] PROGMEM = {
  16, 13,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000000, B11111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00000111,
  B00000000, B00000011,
};


byte const run10[] PROGMEM = {
  16, 13,
  B00000000, B00000100,
  B00000000, B00001100,
  B00000000, B00011100,
  B00000000, B00111100,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000001, B11111111,
  B00000000, B11111100,
  B00000000, B01111100,
  B00000000, B00111100,
  B00000000, B00011100,
  B00000000, B00001100,
};

byte const run11[] PROGMEM = {
  16, 13,
  B00000000, B00001000,
  B00000000, B00011000,
  B00000000, B00111000,
  B00000000, B01111000,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000011, B11111111,
  B00000001, B11111000,
  B00000000, B11111000,
  B00000000, B01111000,
  B00000000, B00111000,
  B00000000, B00011000,
};

byte const run12[] PROGMEM = {
  16, 13,
  B00000000, B00010000,
  B00000000, B00110000,
  B00000000, B01110000,
  B00000000, B11110000,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000111, B11111111,
  B00000111, B11111111,
  B00000011, B11110000,
  B00000001, B11110000,
  B00000000, B11110000,
  B00000000, B01110000,
  B00000000, B00110000,
};

byte const run13[] PROGMEM = {
  16, 13,
  B00000000, B00100000,
  B00000000, B01100000,
  B00000000, B11100000,
  B00000001, B11100000,
  B00000011, B11111111,
  B00000111, B11111111,
  B00001111, B11111111,
  B00001111, B11111111,
  B00000111, B11100000,
  B00000011, B11100000,
  B00000001, B11100000,
  B00000000, B11100000,
  B00000000, B01100000,
};

byte const run14[] PROGMEM = {
  16, 13,
  B00000000, B01000000,
  B00000000, B11000000,
  B00000001, B11000000,
  B00000011, B11000000,
  B00000111, B11111111,
  B00001111, B11111111,
  B00011111, B11111111,
  B00011111, B11111111,
  B00001111, B11000000,
  B00000111, B11000000,
  B00000011, B11000000,
  B00000001, B11000000,
  B00000000, B11000000,
};

byte const run15[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000001, B10000000,
  B00000011, B10000000,
  B00000111, B10000000,
  B00001111, B11111111,
  B00011111, B11111111,
  B00111111, B11111111,
  B00111111, B11111111,
  B00011111, B10000000,
  B00001111, B10000000,
  B00000111, B10000000,
  B00000011, B10000000,
  B00000001, B10000000,
};

byte const run16[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};
Bitmap::ProgMem frames[] = {
    run1,
    run2,
    run3,
    run4,
    run5,
    run6,
    run7,
    run8,
    run9,
    run10,
    run11,
    run12,
    run13,
    run14,
    run15,
    run16,
};
#define NUM_FRAMES  (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;

#define ADVANCE_MS  (1000 / NUM_FRAMES)

void scan()
{
    display.refresh();
}

void setup() {
    Timer1.initialize(2000);
    Timer1.attachInterrupt(scan);
    Timer1.pwm(9,255);
}

void loop() {
    display.clear();
    //int x = (32 - pgm_read_byte(frames[frame])) / 2;
    display.drawBitmap(20, 2, frames[frame]);
    frame = (frame + 1) % NUM_FRAMES;
    delay(ADVANCE_MS);
}
