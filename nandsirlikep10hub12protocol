#Note- in this i have try to make protocol like nand sir to make the p10 display. so that i can use it with any project using rs485 to ttl module with my display.

#include <SoftwareSerial.h>
#include <SPI.h>
#include <DMD3.h>
#include <TimerOne.h>
#include <font/Arial_Black_16.h>
#include <EEPROM.h>

// Define the number of displays
#define DISPLAYS_ACROSS 2
#define DISPLAYS_DOWN 1
DMD3 display(DISPLAYS_ACROSS, DISPLAYS_DOWN);

// EEPROM address to store system ID
#define EEPROM_SYSTEM_ID_ADDR 0

const byte TX_PIN = 2;
const byte RX_PIN = 3;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

// Arrow patterns
const byte upArrow[] PROGMEM = {
  16, 13,
  B00000001, B10000000,
  B00000011, B11000000,
  B00000111, B11100000,
  B00001111, B11110000,
  B00011111, B11111000,
  B00111111, B11111100,
  B01111111, B11111110,
  B11111111, B11111111,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
};

const byte downArrow[] PROGMEM = {
  16, 13,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B11111111, B11111111,
  B01111111, B11111110,
  B00111111, B11111100,
  B00011111, B11111000,
  B00001111, B11110000,
  B00000111, B11100000,
  B00000011, B11000000,
  B00000001, B10000000,
};

const byte leftArrow[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000000, B11000000,
  B00000000, B11100000,
  B00000000, B11110000,
  B11111111, B11111000,
  B11111111, B11111100,
  B11111111, B11111110,
  B11111111, B11111110,
  B00000000, B11111100,
  B00000000, B11111000,
  B00000000, B11110000,
  B00000000, B11100000,
  B00000000, B10000000,
};

const byte rightArrow[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};

const byte* frames[] = {
  upArrow,
  downArrow,
  leftArrow,
  rightArrow,
};

#define NUM_FRAMES  (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;
#define ADVANCE_MS  (1000 / NUM_FRAMES)

// Global variables
int system_id = 1;
String dataBuffer = "";

// Function to handle setting system ID
void setSystemID(String data) {
  int startPos = data.indexOf("|S|") + 3;
  int endPos = data.indexOf('E', startPos);
  if (startPos >= 0 && endPos > startPos) {
    system_id = data.substring(startPos, endPos).toInt();
    EEPROM.write(EEPROM_SYSTEM_ID_ADDR, system_id);  // Write system ID to EEPROM
    Serial.print("System ID set to: ");
    Serial.println(system_id);
  } else {
    Serial.println("Invalid ID format");
  }
}

// Function to handle clearing the screen
void clearScreen(String data) {
  int startPos = data.indexOf("|C|") + 3;
  int endPos = data.indexOf("|6|", startPos);
  if (startPos >= 0 && endPos > startPos) {
    int id_to_clear = data.substring(startPos, endPos).toInt();
    if (id_to_clear == system_id) {
      Serial.println("Clearing screen...");
      display.clear();
    } else {
      Serial.println("ID mismatch, not clearing screen");
    }
  } else {
    Serial.println("Invalid clear screen format");
  }
}

// Function to handle shifting characters
void shiftCharacter(String data) {
  int startPos = data.indexOf("|F|") + 3;
  int endPos = data.indexOf('E', startPos);
  if (startPos >= 0 && endPos > startPos) {
    int position = data.substring(startPos, endPos).toInt();
    Serial.print("Shifting character to position: ");
    Serial.println(position);
    // Implement actual character shifting logic here
  } else {
    Serial.println("Invalid shift character format");
  }
}

void extractData(String data) {
    bool isTemporary = true;  // Assume it's temporary unless proven otherwise
    int startPos = data.indexOf('|') + 1;
    int endPos = data.indexOf('|', startPos);
    String start_byte = data.substring(startPos, endPos);

    startPos = endPos + 1;
    endPos = data.indexOf('|', startPos);
    int ID = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('|', startPos);
    int data_type_code = data.substring(startPos, endPos).toInt();
    
    // Adjust temporary or permanent based on data type code
    isTemporary = (data_type_code == 4);
    String data_type = (isTemporary) ? "temporary" : "permanent";

    startPos = endPos + 1;
    endPos = data.indexOf('|', startPos);
    int fakedata = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('-', startPos);
    int x_axis = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('-', startPos);
    int y_axis = data.substring(startPos, endPos).toInt();

    startPos = endPos + 1;
    endPos = data.indexOf('#', startPos);
    if (endPos != -1) {
        String arrowAndDisplayData = data.substring(endPos + 1);  // Extract everything after '#'

        // Define the arrow directions (valid characters for an arrow)
        String validArrows = "udlr"; // u for up, d for down, l for left, r for right

        String arrow = "";
        String display_data = arrowAndDisplayData;

        // Check if the first character is a valid arrow
        if (validArrows.indexOf(arrowAndDisplayData[0]) != -1) {
            arrow = arrowAndDisplayData.substring(0, 1);  // First character is the arrow
            display_data = arrowAndDisplayData.substring(1);  // Remaining part is the display data
        }

        // Check if the display data has a trailing '|', and remove it
        if (display_data.endsWith("|")) {
            display_data = display_data.substring(0, display_data.length() - 1);  // Remove the last character
        }

        // Print extracted data for debugging
        Serial.println("Extracted Data:");
        Serial.println("ID: " + String(ID));
        Serial.println("Data Type: " + data_type);
        Serial.println("X Axis: " + String(x_axis));
        Serial.println("Y Axis: " + String(y_axis));
        Serial.println("Arrow: " + arrow);
        Serial.println("Display Data: " + display_data);

        // Check if the ID matches the system ID
        if (ID == system_id) {
            // If the arrow is present, display it and offset the display data
            if (arrow.length() > 0) {
                display_arrow(arrow, x_axis, y_axis);
                display_data_at(x_axis + 18, y_axis, display_data);  // Offset display by 3 pixels
            } else {
                // If no arrow, display data at the given coordinates
                display_data_at(x_axis, y_axis, display_data);
            }

            // Store data in EEPROM if it's permanent
            if (!isTemporary) {
                storeDataInEEPROM(x_axis, y_axis, display_data);
            }
        } else {
            Serial.println("ID mismatch, not displaying data");
        }
    } else {
        Serial.println("Invalid data format, no '#' found");
    }
}

// Function to store x, y coordinates and display data in EEPROM
void storeDataInEEPROM(int x_axis, int y_axis, String display_data) {
    int addr = 0;  // Starting address in EEPROM
    
    // Store X and Y axis values
    EEPROM.put(addr, x_axis);
    addr += sizeof(x_axis);
    EEPROM.put(addr, y_axis);
    addr += sizeof(y_axis);

    // Store the display data as a string (up to 50 characters for example)
    int len = display_data.length();
    if (len > 50) len = 50; // Limit to 50 characters
    EEPROM.put(addr, len);
    addr += sizeof(len);

    for (int i = 0; i < len; i++) {
        EEPROM.write(addr + i, display_data[i]);  // Writing string one byte at a time
    }
    addr += len; // Move the address forward by the length of the display data

    // Clear remaining EEPROM bytes if any (optional)
    for (int i = addr; i < EEPROM.length(); i++) {
        EEPROM.write(i, 0);
    }

    Serial.println("Data stored in EEPROM");
}

// Function to retrieve and display stored data from EEPROM after power cycle
void displayStoredData() {
    int addr = 0;  // Starting address in EEPROM
    int x = 0, y = 0;

    EEPROM.get(addr, x); // Use get instead of read for better type safety
    addr += sizeof(x);
    EEPROM.get(addr, y); // Get Y value
    addr += sizeof(y);

    // Read the length of stored data
    int length = 0;
    EEPROM.get(addr, length); // Use get for the length
    addr += sizeof(length);

    String stored_data = "";
    for (int i = 0; i < length; i++) {
        stored_data += char(EEPROM.read(addr + i));  // Reading string one byte at a time
    }

    if (stored_data.length() > 0) {
        Serial.println("Displaying stored data from EEPROM:");
        Serial.println("X Axis: " + String(x));
        Serial.println("Y Axis: " + String(y));
        Serial.println("Stored Data: " + stored_data);

        display_data_at(x, y, stored_data);
    } else {
        Serial.println("No data stored in EEPROM.");
    }
}


// Function to handle custom protocol
void customProtocol(String data) {
  Serial.println("Processing custom protocol...");
  extractData(data);
}

// Function to display arrows
void display_arrow(String direction, int x, int y) {
  if (direction == "u") {
    display.drawBitmap(x, y, upArrow);
  } else if (direction == "d") {
    display.drawBitmap(x, y, downArrow);
  } else if (direction == "l") {
    display.drawBitmap(x, y, leftArrow);
  } else if (direction == "r") {
    display.drawBitmap(x, y, rightArrow);
  } else {
    Serial.println("Unknown arrow direction");
  }
}

// Function to display data at specified coordinates
void display_data_at(int x, int y, String data) {
  // Display string data
  display.drawText(x, y, data.c_str());
  // Additional logic to set color if required
}

// Function to process incoming data
void processData(String data) {
    if (data.startsWith("|S|")) {
        setSystemID(data);
    } 
    else if (data.startsWith("|C|")) {
        int incomingID = data.substring(3, data.indexOf("|", 3)).toInt();
        
        // Compare the incoming ID with the system's ID
        if (incomingID == system_id) {
            if (data.indexOf("|C|" + String(system_id) + "|4|") >= 0) {
                customProtocol(data);
            } 
            else if (data.indexOf("|C|" + String(system_id) + "|8|") >= 0) {
                Serial.println("Text is stored in the EEPROM Memory");
                extractData(data);  // Call extractData for handling |C|...|8|
            }
            else if (data.indexOf("|C|" + String(system_id) + "|6|") >= 0) {
                clearScreen(data);
            } 
            else {
                Serial.println("Unknown command");
            }
        } else {
            Serial.println("ID mismatch. Command not for this system.");
        }
    } 
    else if (data.startsWith("|F|")) {
        shiftCharacter(data);
    } 
    else {
        Serial.println("Unknown command");
    }
}

// Function to display initial message
void displayInitialMessage() {
  display.drawText(0, 0, "sid");
  delay(2000); // Display message for 2 seconds
  display.clear(); // Clear screen after displaying message
}

void scan()
{
    display.refresh();
}

// Setup function
void setup() {
  Serial.begin(115200);
  Serial.println("Start...");
  Soft_Serial.begin(9600);
  Timer1.initialize(2000);
  Timer1.attachInterrupt(scan);
  Timer1.pwm(9, 255);

  //display.setBrightness(255);  // Set brightness to max
  display.setFont(Arial_black_16);  // Set font
  display.clear();  // Clear screen at startup

  // Retrieve system ID from EEPROM
  system_id = EEPROM.read(EEPROM_SYSTEM_ID_ADDR);
  Serial.print("System ID from EEPROM: ");
  Serial.println(system_id);
  displayStoredData();
  // Display initial message
  //displayInitialMessage();
}

// Main loop
void loop() {
  if (Serial.available() > 0) {
    char incomingChar = Serial.read();
    if (incomingChar == '\n' || incomingChar == '\r') {
      if (dataBuffer.length() > 0) {
        Serial.print("Received data: ");
        Serial.println(dataBuffer);
        processData(dataBuffer);
        dataBuffer = "";
      }
    } else {
      dataBuffer += incomingChar;
    }
  }
}


