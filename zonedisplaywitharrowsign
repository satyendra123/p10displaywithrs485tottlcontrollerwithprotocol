#include <SoftwareSerial.h>
#include <SPI.h>
#include <DMD3.h>
#include <TimerOne.h>
#include <font/TimesNewRoman12.h>

const int ledPin = 13;
DMD3 display;

const byte TX_PIN = 2;
const byte RX_PIN = 3;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

// Define a struct for your data
struct CommunicationData {
  byte start;
  byte zone_id;
  byte total_sensor;
  byte sensor_status_1;
  byte sensor_status_2;
  byte total_engaged;
  byte total_disengaged;
  byte total_vacancy;
  byte total_error;
  byte end;
};

byte const arrow1[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};

const byte* frames[] = {
  arrow1,
};

#define NUM_FRAMES  (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;

#define ADVANCE_MS  (1000 / NUM_FRAMES)

void scan() {
  display.refresh();
}

void setup() {
  Serial.begin(115200);
  Serial.println("Start...");
  Soft_Serial.begin(9600);
  Timer1.initialize(2000);
  Timer1.attachInterrupt(scan);
  Timer1.pwm(9, 255);
}

void loop() {
  // Continuously display the arrow
  show_arrow(frames[frame]);
  delay(ADVANCE_MS);

  frame = (frame + 1) % NUM_FRAMES;

  // Check for serial data
  if (Soft_Serial.available() > 0) {
    process_serial_data();
  }
}

void process_serial_data() {
  char buffer[20];
  int bytesRead = Soft_Serial.readBytesUntil('\n', buffer, sizeof(buffer));

  Serial.print("Received raw data: ");
  Serial.println(buffer);
  
  // Check if the start and end bytes are correct
  if (buffer[0] == 'A' && buffer[1] == 'A' && buffer[bytesRead - 2] == '5' && buffer[bytesRead - 1] == '5') {
    // Extract the vacancy byte
    char vacancyCharHigh = buffer[14]; // Extract the high digit
    char vacancyCharLow = buffer[15];  // Extract the low digit
    //Serial.print(buffer[14]);
    //Serial.print(buffer[15]);
    int vacancyHigh = vacancyCharHigh - '0';
    int vacancyLow = vacancyCharLow - '0';
    int vacancy = vacancyHigh * 10 + vacancyLow;
    Serial.print("Vacancy: ");
    Serial.println(vacancy);
    // Display vacancy and arrow on the P10 display
    show_text(vacancy);
  }
  memset(buffer, 0, sizeof(buffer));
}

void show_text(int vacancy) {
  display.clear();
  char vacancyText[4];
  sprintf(vacancyText, "%d", vacancy);
  display.setFont(TimesNewRoman12); // Use a smaller font
  display.drawText(10, 0, vacancyText); // Adjust the position for text
  display.refresh(); // Refresh the display after drawing text
  delay(2000);
}

void show_arrow(const byte* arrow) {
  display.clear(); // Clear the display buffer before drawing the arrow
  display.drawBitmap(20, 2, arrow); // Draw arrow at the left side
  display.refresh(); // Refresh the display after drawing arrow
}

//EXAMPLE-2 Zone display with arrow animation DD 01 03 FF protocol. this code works fine but at the end in the ascii code from the zone controller it sends the <LR><CR> at the end of the protocol. so in the arduino i am getting some garbage values sometimes due to which getting wrong data on the p10 display sometimes. so i have resolved this issue by making the check. use the last example for the code
//arrow animation with the zone data DD 01 03 FF ascii protocol
#include <DMD3.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <DMD3.h>
#include <TimerOne.h>
#include <font/TimesNewRoman12.h>

const int ledPin = 13;
DMD3 display;

const byte TX_PIN = 2;
const byte RX_PIN = 3;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

// Define a struct for your data
struct CommunicationData {
  byte start;
  byte zone_id;
  byte vacancy_data;
  byte end;
};
// Running stick figure pictures are loosely based on those from this tutorial:
// http://www.fluidanims.com/FAelite/phpBB3/viewtopic.php?f=10&t=102

byte const run1[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run2[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000001,
  B00000000, B0000001,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run3[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run4[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run5[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
};


byte const run6[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run7[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000001,
  B00000000, B00000000,
};

byte const run8[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000011,
  B00000000, B00000001,
};


byte const run9[] PROGMEM = {
  16, 13,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000000, B11111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00000111,
  B00000000, B00000011,
};


byte const run10[] PROGMEM = {
  16, 13,
  B00000000, B00000100,
  B00000000, B00001100,
  B00000000, B00011100,
  B00000000, B00111100,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000001, B11111111,
  B00000000, B11111100,
  B00000000, B01111100,
  B00000000, B00111100,
  B00000000, B00011100,
  B00000000, B00001100,
};

byte const run11[] PROGMEM = {
  16, 13,
  B00000000, B00001000,
  B00000000, B00011000,
  B00000000, B00111000,
  B00000000, B01111000,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000011, B11111111,
  B00000001, B11111000,
  B00000000, B11111000,
  B00000000, B01111000,
  B00000000, B00111000,
  B00000000, B00011000,
};

byte const run12[] PROGMEM = {
  16, 13,
  B00000000, B00010000,
  B00000000, B00110000,
  B00000000, B01110000,
  B00000000, B11110000,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000111, B11111111,
  B00000111, B11111111,
  B00000011, B11110000,
  B00000001, B11110000,
  B00000000, B11110000,
  B00000000, B01110000,
  B00000000, B00110000,
};

byte const run13[] PROGMEM = {
  16, 13,
  B00000000, B00100000,
  B00000000, B01100000,
  B00000000, B11100000,
  B00000001, B11100000,
  B00000011, B11111111,
  B00000111, B11111111,
  B00001111, B11111111,
  B00001111, B11111111,
  B00000111, B11100000,
  B00000011, B11100000,
  B00000001, B11100000,
  B00000000, B11100000,
  B00000000, B01100000,
};

byte const run14[] PROGMEM = {
  16, 13,
  B00000000, B01000000,
  B00000000, B11000000,
  B00000001, B11000000,
  B00000011, B11000000,
  B00000111, B11111111,
  B00001111, B11111111,
  B00011111, B11111111,
  B00011111, B11111111,
  B00001111, B11000000,
  B00000111, B11000000,
  B00000011, B11000000,
  B00000001, B11000000,
  B00000000, B11000000,
};

byte const run15[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000001, B10000000,
  B00000011, B10000000,
  B00000111, B10000000,
  B00001111, B11111111,
  B00011111, B11111111,
  B00111111, B11111111,
  B00111111, B11111111,
  B00011111, B10000000,
  B00001111, B10000000,
  B00000111, B10000000,
  B00000011, B10000000,
  B00000001, B10000000,
};

byte const run16[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};
Bitmap::ProgMem frames[] = {
    run1,
    run2,
    run3,
    run4,
    run5,
    run6,
    run7,
    run8,
    run9,
    run10,
    run11,
    run12,
    run13,
    run14,
    run15,
    run16,
};
#define NUM_FRAMES  (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;

#define ADVANCE_MS  (1000 / NUM_FRAMES)

void scan()
{
    display.refresh();
}

void setup() {
    Serial.begin(115200);
  Serial.println("Start...");
  Soft_Serial.begin(9600);
  Timer1.initialize(2000);
  Timer1.attachInterrupt(scan);
  Timer1.pwm(9,255);
}

  void loop() {
  // Continuously display the arrow
  show_arrow(frames[frame]);
  delay(ADVANCE_MS);

  frame = (frame + 1) % NUM_FRAMES;

  // Check for serial data
  if (Soft_Serial.available() > 0) {
    process_serial_data();
  }
}

void process_serial_data() {
  char buffer[8];
  int bytesRead = Soft_Serial.readBytesUntil('\n', buffer, sizeof(buffer));

  Serial.print("Received raw data: ");
  Serial.println(buffer);
  
  // Check if the start and end bytes are correct
  if (buffer[0] == 'D' && buffer[1] == 'D' && buffer[bytesRead - 2] == 'F' && buffer[bytesRead - 1] == 'F') {
    // Extract the vacancy data
    char vacancyCharHigh = buffer[4]; // Extract the high digit
    char vacancyCharLow = buffer[5];  // Extract the low digit
    Serial.print(buffer[4]);
    Serial.print(buffer[5]);
    int vacancyHigh = vacancyCharHigh - '0';
    int vacancyLow = vacancyCharLow - '0';
    int vacancy = vacancyHigh * 10 + vacancyLow;
    Serial.print("Vacancy: ");
    Serial.println(vacancy);
    // Display vacancy and arrow on the P10 display
    show_text(vacancy);
  }
  memset(buffer, 0, sizeof(buffer));
}

void show_text(int vacancy) {
  display.clear();
  char vacancyText[4];
  sprintf(vacancyText, "%d", vacancy);
  display.setFont(TimesNewRoman12); // Use a smaller font
  display.drawText(10, 0, vacancyText); // Adjust the position for text
  display.refresh(); // Refresh the display after drawing text
  delay(2000);
}

void show_arrow(const byte* arrow) {
    display.clear();
    //int x = (32 - pgm_read_byte(frames[frame])) / 2;
    display.drawBitmap(20, 2, frames[frame]);
    frame = (frame + 1) % NUM_FRAMES;
    delay(ADVANCE_MS);
}
//EXAMPLE-3 remove the CR and <LR> at the end and process the correct data. so that it receives and display the correct data every time
#include <DMD3.h>
#include <SoftwareSerial.h>
#include <SPI.h>
#include <TimerOne.h>
#include <font/TimesNewRoman12.h>

const int ledPin = 13;
DMD3 display;

const byte TX_PIN = 2;
const byte RX_PIN = 3;

SoftwareSerial Soft_Serial(RX_PIN, TX_PIN);

byte const run1[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run2[] PROGMEM = {
  16, 13,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000001,
  B00000000, B0000001,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
  B00000000, B0000000,
};


byte const run3[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run4[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run5[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000001,
  B00000000, B00000000,
  B00000000, B00000000,
};


byte const run6[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000011,
  B00000000, B00000000,
  B00000000, B00000000,
};

byte const run7[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000111,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000111,
  B00000000, B00000001,
  B00000000, B00000000,
};

byte const run8[] PROGMEM = {
  16, 13,
  B00000000, B00000000,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00001111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00001111,
  B00000000, B00000011,
  B00000000, B00000001,
};


byte const run9[] PROGMEM = {
  16, 13,
  B00000000, B00000001,
  B00000000, B00000011,
  B00000000, B00000111,
  B00000000, B00011111,
  B00000000, B00111111,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000000, B11111111,
  B00000000, B01111111,
  B00000000, B00111111,
  B00000000, B00011111,
  B00000000, B00000111,
  B00000000, B00000011,
};


byte const run10[] PROGMEM = {
  16, 13,
  B00000000, B00000100,
  B00000000, B00001100,
  B00000000, B00011100,
  B00000000, B00111100,
  B00000000, B01111111,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000001, B11111111,
  B00000000, B11111100,
  B00000000, B01111100,
  B00000000, B00111100,
  B00000000, B00011100,
  B00000000, B00001100,
};

byte const run11[] PROGMEM = {
  16, 13,
  B00000000, B00001000,
  B00000000, B00011000,
  B00000000, B00111000,
  B00000000, B01111000,
  B00000000, B11111111,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000011, B11111111,
  B00000001, B11111000,
  B00000000, B11111000,
  B00000000, B01111000,
  B00000000, B00111000,
  B00000000, B00011000,
};

byte const run12[] PROGMEM = {
  16, 13,
  B00000000, B00010000,
  B00000000, B00110000,
  B00000000, B01110000,
  B00000000, B11110000,
  B00000001, B11111111,
  B00000011, B11111111,
  B00000111, B11111111,
  B00000111, B11111111,
  B00000011, B11110000,
  B00000001, B11110000,
  B00000000, B11110000,
  B00000000, B01110000,
  B00000000, B00110000,
};

byte const run13[] PROGMEM = {
  16, 13,
  B00000000, B00100000,
  B00000000, B01100000,
  B00000000, B11100000,
  B00000001, B11100000,
  B00000011, B11111111,
  B00000111, B11111111,
  B00001111, B11111111,
  B00001111, B11111111,
  B00000111, B11100000,
  B00000011, B11100000,
  B00000001, B11100000,
  B00000000, B11100000,
  B00000000, B01100000,
};

byte const run14[] PROGMEM = {
  16, 13,
  B00000000, B01000000,
  B00000000, B11000000,
  B00000001, B11000000,
  B00000011, B11000000,
  B00000111, B11111111,
  B00001111, B11111111,
  B00011111, B11111111,
  B00011111, B11111111,
  B00001111, B11000000,
  B00000111, B11000000,
  B00000011, B11000000,
  B00000001, B11000000,
  B00000000, B11000000,
};

byte const run15[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000001, B10000000,
  B00000011, B10000000,
  B00000111, B10000000,
  B00001111, B11111111,
  B00011111, B11111111,
  B00111111, B11111111,
  B00111111, B11111111,
  B00011111, B10000000,
  B00001111, B10000000,
  B00000111, B10000000,
  B00000011, B10000000,
  B00000001, B10000000,
};

byte const run16[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};
Bitmap::ProgMem frames[] = {
    run1,
    run2,
    run3,
    run4,
    run5,
    run6,
    run7,
    run8,
    run9,
    run10,
    run11,
    run12,
    run13,
    run14,
    run15,
    run16,
};

#define NUM_FRAMES (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;

#define ADVANCE_MS (1000 / NUM_FRAMES)

unsigned long lastFrameChange = 0;
int currentVacancy = -1; // Keep track of the current vacancy value

void scan() {
    display.refresh();
}

void setup() {
    Serial.begin(9600);
    Serial.println("Start...");
    Soft_Serial.begin(9600);
    Timer1.initialize(2000);
    Timer1.attachInterrupt(scan);
    Timer1.pwm(9, 255);
}

void loop() {
    unsigned long currentMillis = millis();

    // Continuously display the arrow
    if (currentMillis - lastFrameChange >= ADVANCE_MS) {
        show_arrow(frames[frame]);
        frame = (frame + 1) % NUM_FRAMES;
        lastFrameChange = currentMillis;
    }

    // Check for serial data
    if (Soft_Serial.available() > 0) {
        process_serial_data();
    }
}

void process_serial_data() {
    const int BUFFER_SIZE = 9;
    char buffer[BUFFER_SIZE];
    memset(buffer, 0, BUFFER_SIZE); // Clear the buffer before use

    int bytesRead = Soft_Serial.readBytesUntil('\n', buffer, BUFFER_SIZE - 1); // Leave space for null terminator

    if (bytesRead > 0) {
        Serial.print("Received raw data: ");
        Serial.println(buffer);

        // Check if the start and end bytes are correct
        if (buffer[0] == 'D' && buffer[1] == 'D' && buffer[bytesRead - 2] == 'F' && buffer[bytesRead - 1] == 'F') {
            // Extract the vacancy data
            char vacancyCharHigh = buffer[4]; // Extract the high digit
            char vacancyCharLow = buffer[5];  // Extract the low digit

            int vacancy = (vacancyCharHigh - '0') * 10 + (vacancyCharLow - '0');

            Serial.print("Vacancy: ");
            Serial.println(vacancy);

            // Update vacancy display if changed and if vacancy is non-negative
            if (vacancy >= 0 && vacancy != currentVacancy) {
                currentVacancy = vacancy;
                show_text(vacancy);
            }
          memset(buffer, 0, BUFFER_SIZE); // Clear the buffer before use
        }
    }
}

void show_text(int vacancy) {
    // Clear the entire display before updating
    display.clear();
    display.setFont(TimesNewRoman12); // Use a smaller font

    char vacancyText[4];
    sprintf(vacancyText, "%d", vacancy);

    int x = (display.width() - display.textWidth(vacancyText)) / 2; // Center the text horizontally
    display.drawText(x - 10, 0, vacancyText); // Adjust the position for text
    display.refresh(); // Refresh the display after drawing text
}

void show_arrow(const byte* arrow) {
    // Clear the specific area for the arrow
    int x = (display.width() - 32) / 2; // Center the bitmap horizontally
    display.drawBitmap(x + 22, 2, arrow);
    display.refresh();
}

#example- IN THIS I WILL USE THE NAND SIR PROTOCOL and make it. but i have not tested it...
#include <SoftwareSerial.h>
#include <SPI.h>
#include <DMD3.h>
#include <TimerOne.h>
#include <font/TimesNewRoman12.h>
#include <EEPROM.h>

// Define the number of displays
#define DISPLAYS_ACROSS 4
#define DISPLAYS_DOWN 1
DMD3 display(DISPLAYS_ACROSS, DISPLAYS_DOWN);

// EEPROM address to store system ID
#define EEPROM_SYSTEM_ID_ADDR 0

// Arrow patterns
const byte upArrow[] PROGMEM = {
  16, 13,
  B00000001, B10000000,
  B00000011, B11000000,
  B00000111, B11100000,
  B00001111, B11110000,
  B00011111, B11111000,
  B00111111, B11111100,
  B01111111, B11111110,
  B11111111, B11111111,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
};

const byte downArrow[] PROGMEM = {
  16, 13,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B00001111, B11110000,
  B11111111, B11111111,
  B01111111, B11111110,
  B00111111, B11111100,
  B00011111, B11111000,
  B00001111, B11110000,
  B00000111, B11100000,
  B00000011, B11000000,
  B00000001, B10000000,
};

const byte leftArrow[] PROGMEM = {
  16, 13,
  B00000000, B10000000,
  B00000000, B11000000,
  B00000000, B11100000,
  B00000000, B11110000,
  B11111111, B11111000,
  B11111111, B11111100,
  B11111111, B11111110,
  B11111111, B11111110,
  B00000000, B11111100,
  B00000000, B11111000,
  B00000000, B11110000,
  B00000000, B11100000,
  B00000000, B10000000,
};

const byte rightArrow[] PROGMEM = {
  16, 13,
  B00000001, B00000000,
  B00000011, B00000000,
  B00000111, B00000000,
  B00001111, B00000000,
  B00011111, B11111111,
  B00111111, B11111111,
  B01111111, B11111111,
  B01111111, B11111111,
  B00111111, B00000000,
  B00011111, B00000000,
  B00001111, B00000000,
  B00000111, B00000000,
  B00000011, B00000000,
};

const byte* frames[] = {
  upArrow,
  downArrow,
  leftArrow,
  rightArrow,
};

#define NUM_FRAMES  (sizeof(frames) / sizeof(frames[0]))
unsigned int frame = 0;
#define ADVANCE_MS  (1000 / NUM_FRAMES)

// Global variables
int system_id = -1;
String dataBuffer = "";

// Function to handle setting system ID
void setSystemID(String data) {
  int startPos = data.indexOf("|S|") + 3;
  int endPos = data.indexOf('E', startPos);
  if (startPos >= 0 && endPos > startPos) {
    system_id = data.substring(startPos, endPos).toInt();
    EEPROM.write(EEPROM_SYSTEM_ID_ADDR, system_id);  // Write system ID to EEPROM
    Serial.print("System ID set to: ");
    Serial.println(system_id);
  } else {
    Serial.println("Invalid ID format");
  }
}

// Function to handle clearing the screen
void clearScreen(String data) {
  int startPos = data.indexOf("|C|") + 3;
  int endPos = data.indexOf("|6|", startPos);
  if (startPos >= 0 && endPos > startPos) {
    int id_to_clear = data.substring(startPos, endPos).toInt();
    if (id_to_clear == system_id) {
      Serial.println("Clearing screen...");
      display.clearScreen(true);  // Clear screen
    } else {
      Serial.println("ID mismatch, not clearing screen");
    }
  } else {
    Serial.println("Invalid clear screen format");
  }
}

// Function to handle shifting characters
void shiftCharacter(String data) {
  int startPos = data.indexOf("|F|") + 3;
  int endPos = data.indexOf('E', startPos);
  if (startPos >= 0 && endPos > startPos) {
    int position = data.substring(startPos, endPos).toInt();
    Serial.print("Shifting character to position: ");
    Serial.println(position);
    // Implement actual character shifting logic here
  } else {
    Serial.println("Invalid shift character format");
  }
}

// Function to extract data
void extractData(String data) {
  // Extracting data without mapping
  int startPos = data.indexOf('|') + 1;
  int endPos = data.indexOf('|', startPos);
  String start_byte = data.substring(startPos, endPos);

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  int ID = data.substring(startPos, endPos).toInt();

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  int data_type_code = data.substring(startPos, endPos).toInt();
  String data_type = (data_type_code == 4) ? "temporary" : "permanent";

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  int fakedata = data.substring(startPos, endPos).toInt();

  startPos = endPos + 1;
  endPos = data.indexOf('-', startPos);
  int x_axis = data.substring(startPos, endPos).toInt();

  startPos = endPos + 1;
  endPos = data.indexOf('-', startPos);
  int y_axis = data.substring(startPos, endPos).toInt();

  startPos = endPos + 2; // Skip past '-' and '#'
  endPos = data.indexOf('#', startPos);
  String arrow = data.substring(startPos, endPos);

  startPos = endPos + 1;
  endPos = data.indexOf('|', startPos);
  String colorWithData = data.substring(startPos, endPos);
  String actualColor = colorWithData.substring(0, 1);
  String display_data = colorWithData.substring(1);

  // Print the extracted data
  Serial.println("Extracted Data:");
  Serial.println("Start Byte: " + start_byte);
  Serial.println("ID: " + String(ID));
  Serial.println("Data Type: " + data_type);
  Serial.println("X Axis: " + String(x_axis));
  Serial.println("Y Axis: " + String(y_axis));
  Serial.println("Arrow: " + arrow);
  Serial.println("Color: " + actualColor);
  Serial.println("Display Data: " + display_data);

  // Check if the ID matches the system ID
  if (ID == system_id) {
    // Display the arrow at (0, 0)
    display_arrow(arrow, 0, 0);

    // Display the data at specified coordinates
    display_data_at(x_axis, y_axis, display_data, actualColor);
  } else {
    Serial.println("ID mismatch, not displaying data");
  }
}

// Function to handle custom protocol
void customProtocol(String data) {
  Serial.println("Processing custom protocol...");
  extractData(data);
}

// Function to display arrows
void display_arrow(String direction, int x, int y) {
  if (direction == "u") {
    display.drawBitmap(x, y, upArrow + 2, 16, 13, GRAPHICS_NORMAL);
  } else if (direction == "d") {
    display.drawBitmap(x, y, downArrow + 2, 16, 13, GRAPHICS_NORMAL);
  } else if (direction == "l") {
    display.drawBitmap(x, y, leftArrow + 2, 16, 13, GRAPHICS_NORMAL);
  } else if (direction == "r") {
    display.drawBitmap(x, y, rightArrow + 2, 16, 13, GRAPHICS_NORMAL);
  } else {
    Serial.println("Unknown arrow direction");
  }
}

// Function to display data at specified coordinates
void display_data_at(int x, int y, String data, String color) {
  // Display string data
  display.drawText(x, y, data.c_str(), GRAPHICS_NORMAL);
  // Additional logic to set color if required
}

// Function to process incoming data
void processData(String data) {
  if (data.startsWith("|S|")) {
    setSystemID(data);
  } else if (data.startsWith("|C|")) {
    if (data.indexOf("|C|1|4|") >= 0) {
      customProtocol(data);
    } else if (data.indexOf("|C|1|6|") >= 0) {
      clearScreen(data);
    } else {
      Serial.println("Unknown command");
    }
  } else if (data.startsWith("|F|")) {
    shiftCharacter(data);
  } else {
    Serial.println("Unknown command");
  }
}

// Function to display initial message
void displayInitialMessage() {
  display.drawText(0, 0, "sid", GRAPHICS_NORMAL);
  delay(2000); // Display message for 2 seconds
  display.clearScreen(true); // Clear screen after displaying message
}

// Setup function
void setup() {
  Serial.begin(115200);
  Serial.println("Start...");
  Soft_Serial.begin(9600);
  Timer1.initialize(2000);
  Timer1.attachInterrupt(scan);
  Timer1.pwm(9, 255);

  display.setBrightness(255);  // Set brightness to max
  display.setFont(TimesNewRoman12);  // Set font
  display.clearScreen(true);  // Clear screen at startup

  // Retrieve system ID from EEPROM
  system_id = EEPROM.read(EEPROM_SYSTEM_ID_ADDR);
  Serial.print("System ID from EEPROM: ");
  Serial.println(system_id);

  // Display initial message
  displayInitialMessage();
}

// Main loop
void loop() {
  if (Serial.available() > 0) {
    char incomingChar = Serial.read();
    if (incomingChar == '\n' || incomingChar == '\r') {
      if (dataBuffer.length() > 0) {
        Serial.print("Received data: ");
        Serial.println(dataBuffer);
        processData(dataBuffer);
        dataBuffer = "";
      }
    } else {
      dataBuffer += incomingChar;
    }
  }
}

